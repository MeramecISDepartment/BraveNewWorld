using System;

using System.Collections.Generic;

using System.ComponentModel;

using System.Data;

using System.Drawing;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

using System.Windows;
using System.Windows.Forms;

using VectorLandMesh.Land;
namespace Brave_New_World
{
    public partial class MapDisplay : Form
    {
        //Used in Graphics Liabary
        private Graphics drawing;
      
        public MapDisplay()
        {
            InitializeComponent();
            drawing = picboxDrawing.CreateGraphics();
        }
        /// <summary>
        /// Test button for terrain generation.
        /// </summary>
        private void btnDraw_Click(object sender, EventArgs e)
        {
            #region User Interactive Properties
            //Color list each level of the hight map.
            List<Color> colorLevelList = new List<Color>();

            //odds map will be generated by settings.
            int[] oddsMap = { 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4 };

            //Number of points on each Contour | Number of levels on a map.
            int detail = 16, levels = 32;

            //test for map data. will be set in to class List
            List<System.Windows.Point> VectorLengths = new List<System.Windows.Point>() { new System.Windows.Point(10, 20), new System.Windows.Point(5, 20) };

            //add a color the color list base on a gray scale.
            for (int i = levels; i > 0; i--)
            {
                colorLevelList.Add(Color.FromArgb(i * 255 / levels, i * 255 / levels, i * 255 / levels));
            }
            #endregion

            #region Terrain Generation Veriables
            //number of current meshes on each level.
            int meshOnLevel = 0;

            List<LandMesh> mapMeshData = new List<LandMesh>();
            //used later in loop on [Line 46]
            LandMesh land;
            #endregion

            #region Point Type Conversion Veriables
            //list of Points used to draw the Map at Each Level.
            List<List<System.Drawing.Point>> listOfDrawingPoints;
            List<System.Drawing.Point> drawingPoints;
            List<List<List<System.Drawing.Point>>> drawingMapData = new List<List<List<System.Drawing.Point>>>();
            #endregion

            #region Drawing Veriables
            //ofsets for each point to ensure points are drawn corectly. "Refer to Notes"[AKA Set up notes and as me in class about this it is kind of complicated.]
            List<int> offsets = new List<int>();
            // "Y - offset refer to above note"[AKA Set up notes and as me in class about this it is kind of complicated.]
            int y2 = 0;
            #endregion

            #region Map Initialization


            //Clear drawing area.
            drawing.Clear(Color.Blue);

            //Initialize the map
            Map.InitializeMap(detail, new float[] { drawing.VisibleClipBounds.X, drawing.VisibleClipBounds.Y, drawing.VisibleClipBounds.Width, drawing.VisibleClipBounds.Height });
            #endregion

            #region Terrain Generation
            //grabs a first randum number form an odds map
            meshOnLevel = oddsMap[Map.MapSeed.Next(0, oddsMap.Length - 1)];

            //sets the first two values to 0 after the first level has a number of meshes.[Will be edited with user input.]
            oddsMap[0] = 0;
            oddsMap[1] = 0;

            for (int x = levels; x > 0; x--)
            {
                //adds new Contour for each existing mesh.                
                foreach (LandMesh mesh in mapMeshData)
                {
                    mesh.addNewContour();
                }

                //add new land mesh(s)
                for (int y = meshOnLevel; y > 0; y--)
                {
                    land = new LandMesh(VectorLengths, 10D, x);
                    mapMeshData.Add(land);
                }

                //grabs a randum number form an odds map.
                meshOnLevel = oddsMap[Map.MapSeed.Next(0, oddsMap.Length - 1)];
            }
            #endregion

            /*
             * Points in Visual C# Forms are System.Drawing.Point(X and Y are int values)
             * Points in LandMesh Classare System.Windows.Point(X and Y are Decimal values)
             * So they need to be converted.
             */
            
            #region Point Type Conversion
            foreach (LandMesh mesh in mapMeshData)
            {
                // resets the "List Of Drawing Points"
                listOfDrawingPoints = new List<List<System.Drawing.Point>>();
                foreach (List<System.Windows.Point> list in mesh.RawPoints)
                {
                    // resets the "Drawing Points"
                    drawingPoints = new List<System.Drawing.Point>();
                    foreach (System.Windows.Point point in list)
                    {
                        //converts the X and Y values of System.Windows.Point (Decimal) to (int) and set them to a new System.Drawing.Point Object
                        drawingPoints.Add(new System.Drawing.Point((int)point.X, (int)point.Y));
                    }
                    // Add the new "Drawing Points" to the "List Of Drawing Points"
                    listOfDrawingPoints.Add(drawingPoints);
                }
                //Add the "List Of Drawing Points" to the "Drawing Map Data"
                drawingMapData.Add(listOfDrawingPoints);
            }
            #endregion

            #region Drawing
   
            
            for (int y = levels; y > 0; y--)
            {

                for (int x = 0 ; x < mapMeshData.Count; x++)
                {
                    if (y == levels)
                    {
                        offsets.Add(y-mapMeshData[x].NumberOfLevel);
                    }
                    y2=y-offsets[x];
                    if(y2>0){
                        System.Drawing.Point[] myPoints = drawingMapData[x][y2-1].ToArray<System.Drawing.Point>();
                        drawing.FillClosedCurve(new SolidBrush(colorLevelList[y-1]), myPoints);// how to graph the shape using the array of points
                    }
                }
            }
            #endregion

        }

        private void MapDisplay_Load(object sender, EventArgs e)
        {

        }

        
    }
}
