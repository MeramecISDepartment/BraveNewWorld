using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows;
using System.Threading.Tasks;
using System.Windows.Forms;
using VectorLandMesh.Land;
namespace Brave_New_World
{
    public partial class Form1 : Form
    {
        Graphics drawing;
        public Form1()
        {
            InitializeComponent();
            drawing = picboxDrawing.CreateGraphics();
        }

        private static List<System.Drawing.Point> ToDrawingPoints(List<System.Windows.Point> windowsPoint)
        {
            List<System.Drawing.Point> drawingPoints = new List<System.Drawing.Point>();
            foreach (System.Windows.Point point in windowsPoint)
            {
                drawingPoints.Add(new System.Drawing.Point((int)point.X, (int)point.Y));
            }
            return drawingPoints;
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            drawing.Clear(Color.White);

        }

        private void button1_Click(object sender, EventArgs e)
        {
              List<Color> color = new List<Color>();

            //
            int meshOnLevel = 0;

            //odds map will be generated by Map settings.
            int[] oddsMap = { 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4 };

            /*  CONSTS: Need To replace with class for map Properties
             * MAX_SECTIONS     : Max number of section each contour is divide in to.
             * MAX_LENGTH       : Max length of each Contours Vector
             * LEVELS           : Number of Levels for each mesh.
             * min number of Land Meshes per level
             */
            const int MAX_SECTIONS = 16, MAX_LENGTH = 10, LEVELS = 12;
            for (int i = LEVELS; i > 0; i--)
            {
                int argb=LEVELS+LEVELS*100+LEVELS*10000;
                color.Add(Color.FromArgb(argb));
            }
            //test for map data. will be set in to class List
            List<LandMesh> mapMeshData = new List<LandMesh>();

            //used later in loop on [Line 46]
            LandMesh land;
            //Map.InitializeMap(MAX_SECTIONS);
            //Map.InitializeSeed();
            //grabs a randum number form an odds map.
            meshOnLevel = oddsMap[Map.MapSeed.Next(0, oddsMap.Length - 1)];
            oddsMap[0] = 0;
            oddsMap[1] = 0;

            for (int x = LEVELS-1; x > 0; x--)
            {
                //adds new Contour for each existing mesh.                
                foreach (LandMesh mesh in mapMeshData)
                {
                    mesh.addNewContour();
                }

                //add new land mesh(s)
                for (int y = meshOnLevel; y > 0; y--)
                {
                    land = new LandMesh(new System.Windows.Point(50, 70), 10D, x);
                    mapMeshData.Add(land);
                }

                //grabs a randum number form an odds map.
                meshOnLevel = oddsMap[Map.MapSeed.Next(0, oddsMap.Length - 1)];
            }
            //adds new a Contour for existing meshes.
            foreach (LandMesh mesh in mapMeshData)
            {
                //add new contour to the end of every mesh
                mesh.addNewContour();
            }
            double drpo = mapMeshData[0].HeightLevel;
            //soon to be removed for Class Structure
            List<List<List<System.Windows.Point>>> mapdata = new List<List<List<System.Windows.Point>>>();
            System.Windows.Point d;
            foreach (LandMesh mesh in mapMeshData)
            {
                mapdata.Add(mesh.Points);
            }
            for (int y = LEVELS; y > 0; y--)
            {
                for (int x = mapMeshData.Count-1; x > 0; x--)
                {
                    if (mapMeshData[x].NumberOfLevel > y )
                    for (int z = Map.Detail-1; z > 0; z--)
                    {
                        System.Drawing.Point[] myPoints = Form1.ToDrawingPoints(mapdata[x][y]).ToArray<System.Drawing.Point>();
                        drawing.FillClosedCurve(new SolidBrush(color[y]), myPoints);// how to graph the shape using the array of points
                    }
                }
            }
        }
    }
}